diff --git a/Makefile b/Makefile
index 0dc9c4b..1df051c 100644
--- a/Makefile
+++ b/Makefile
@@ -3,8 +3,8 @@ VIVADO_VERSION ?= 2022.2
 
 # Use Buildroot External Linaro GCC 7.3-2018.05 arm-linux-gnueabihf Toolchain
 CROSS_COMPILE = arm-linux-gnueabihf-
-TOOLS_PATH = PATH="$(CURDIR)/buildroot/output/host/bin:$(CURDIR)/buildroot/output/host/sbin:$(PATH)"
-TOOLCHAIN = $(CURDIR)/buildroot/output/host/bin/$(CROSS_COMPILE)gcc
+TOOLS_PATH = PATH="$(PATH)"
+TOOLCHAIN = /usr/bin/arm-linux-gnueabihf-gcc
 
 NCORES = $(shell grep -c ^processor /proc/cpuinfo)
 VIVADO_SETTINGS ?= /opt/Xilinx/Vivado/$(VIVADO_VERSION)/settings64.sh
@@ -27,8 +27,8 @@ $(error "      3] export VIVADO_VERSION=v20xx.x")
 	endif
 endif
 
-TARGET ?= pluto
-SUPPORTED_TARGETS:=pluto sidekiqz2
+TARGET ?= libre
+SUPPORTED_TARGETS:=pluto sidekiqz2 libre
 
 # Include target specific constants
 include scripts/$(TARGET).mk
@@ -48,7 +48,7 @@ endif
 
 ifeq ($(findstring $(TARGET),$(SUPPORTED_TARGETS)),)
 all:
-	@echo "Invalid `TARGET variable ; valid values are: pluto, sidekiqz2" &&
+	@echo "Invalid `TARGET variable ; valid values are: pluto, sidekiqz2, libre" &&
 	exit 1
 else
 all: clean-build $(TARGETS) zip-all legal-info
@@ -91,12 +91,15 @@ build/uboot-env.bin: build/uboot-env.txt
 linux/arch/arm/boot/zImage: TOOLCHAIN
 	$(TOOLS_PATH) make -C linux ARCH=arm CROSS_COMPILE=$(CROSS_COMPILE) zynq_$(TARGET)_defconfig
 	$(TOOLS_PATH) make -C linux -j $(NCORES) ARCH=arm CROSS_COMPILE=$(CROSS_COMPILE) zImage UIMAGE_LOADADDR=0x8000
+	$(TOOLS_PATH) make -C linux -j $(NCORES) ARCH=arm CROSS_COMPILE=$(CROSS_COMPILE) uImage UIMAGE_LOADADDR=0x8000
 
 .PHONY: linux/arch/arm/boot/zImage
-
+.PHONY: linux/arch/arm/boot/uImage
 
 build/zImage: linux/arch/arm/boot/zImage | build
 	cp $< $@
+build/uImage: linux/arch/arm/boot/uImage  | build
+	cp $< $@
 
 ### Device Tree ###
 
@@ -177,6 +180,7 @@ build/$(TARGET).dfu: build/$(TARGET).itb
 clean-build:
 	rm -f $(notdir $(wildcard build/*))
 	rm -rf build/*
+	rm -rf build_sdimg
 
 clean:
 	make -C u-boot-xlnx clean
@@ -185,6 +189,32 @@ clean:
 	make -C hdl clean
 	rm -f $(notdir $(wildcard build/*))
 	rm -rf build/*
+	rm -rf build_sdimg
+	
+overclock: build/sdk/fsbl/Release/fsbl.elf
+	test -n "$(OVERCLOCK_CPU_MULT)"  # Check environment veriable OVERCLOCK_CPU_MULT for overclock.
+	test -n "$(OVERCLOCK_DDR_MULT)"  # Check environment veriable OVERCLOCK_DDR_MULT for overclock.
+	bash -c "source $(VIVADO_SETTINGS) && ./overclock.sh $(OVERCLOCK_CPU_MULT) $(OVERCLOCK_DDR_MULT)"
+
+SDIMGDIR = $(CURDIR)/build_sdimg
+sdimg: build/
+	mkdir $(SDIMGDIR)
+	cp build/sdk/fsbl/Release/fsbl.elf 	$(SDIMGDIR)/fsbl.elf  
+	cp build/sdk/system_top/hw/system_top.bit 	$(SDIMGDIR)/system_top.bit
+	cp build/u-boot.elf 			$(SDIMGDIR)/u-boot.elf
+	cp $(CURDIR)/linux/arch/arm/boot/uImage	$(SDIMGDIR)/uImage
+	cp build/zynq-$(TARGET).dtb 	$(SDIMGDIR)/devicetree.dtb
+	cp build/uboot-env.txt  		$(SDIMGDIR)/uEnv.txt
+	cp build/rootfs.cpio.gz  		$(SDIMGDIR)/ramdisk.image.gz
+	mkimage -A arm -T ramdisk -C gzip -d $(SDIMGDIR)/ramdisk.image.gz $(SDIMGDIR)/uramdisk.image.gz
+	touch 	$(SDIMGDIR)/boot.bif
+	echo "img : {[bootloader] $(SDIMGDIR)/fsbl.elf  $(SDIMGDIR)/system_top.bit  $(SDIMGDIR)/u-boot.elf}" >  $(SDIMGDIR)/boot.bif
+	bash -c "source $(VIVADO_SETTINGS) && bootgen -image $(SDIMGDIR)/boot.bif -o i $(SDIMGDIR)/BOOT.bin"
+#	rm $(SDIMGDIR)/fsbl.elf
+#	rm $(SDIMGDIR)/system_top.bit
+#	rm $(SDIMGDIR)/u-boot.elf
+#	rm $(SDIMGDIR)/ramdisk.image.gz 
+#	rm $(SDIMGDIR)/boot.bif
 
 zip-all: $(TARGETS)
 	zip -j build/$(ZIP_ARCHIVE_PREFIX)-fw-$(VERSION).zip $^
diff --git a/download_and_test.sh b/download_and_test.sh
index 4cd279c..ed3f80f 100755
--- a/download_and_test.sh
+++ b/download_and_test.sh
@@ -1,11 +1,11 @@
 #~/bin/sh
-# This resets a connected pluto, loads firmware into ram, and boots it
+# This resets a connected pluto (libre clone), loads firmware into ram, and boots it
 #
 
 #default IP address
 ipaddr=192.168.2.1
 
-if [ ! -f ./build/pluto.dfu ] ; then
+if [ ! -f ./build/libre.dfu ] ; then
     echo no file to upload
     exit
 fi
@@ -32,4 +32,4 @@ do
 done
 
 # -R resets/terminates the dfu after we are done
-sudo dfu-util -R -d 0456:b673,0456:b674 -D ./build/pluto.dfu -a firmware.dfu
+sudo dfu-util -R -d 0456:b673,0456:b674 -D ./build/libre.dfu -a firmware.dfu
diff --git a/overclock.sh b/overclock.sh
new file mode 100755
index 0000000..0141b42
--- /dev/null
+++ b/overclock.sh
@@ -0,0 +1,66 @@
+#!/bin/bash
+
+if [ "$#" -lt 2 ]; then
+    echo "Usage $0: OVERCLOCK_CPU_MULT OVERCLOCK_DDR_MULT"
+    echo "Note that we set frequency multipliers, rather than absolute frequency."
+    echo "Multipliers are presented as decimal numbers."
+    echo "Example: $0 40 28"
+    exit 1
+fi
+
+SDK_PATH="build/sdk/fsbl"
+PS7_INIT_FILE="${SDK_PATH}/src/ps7_init.c"
+
+if [ ! -f "${PS7_INIT_FILE}" ]; then
+    echo "${PS7_INIT_FILE} not found!"
+    exit 2
+fi
+
+
+cpu_mult_template='EMIT_MASKWRITE\(0XF8000100, 0x0007F000U ,0x000XX000U\),'
+cpu_mult_find='\s'"${cpu_mult_template/XX/(..)}"
+ddr_mult_template='EMIT_MASKWRITE\(0XF8000104, 0x0007F000U ,0x000XX000U\),'
+ddr_mult_find='\s'"${ddr_mult_template/XX/(..)}"
+
+current_cpu_mult_hex=$(head -n 1 <<< $(sed -rn 's/'"${cpu_mult_find}"'/\1/p' "$PS7_INIT_FILE"))
+current_ddr_mult_hex=$(head -n 1 <<< $(sed -rn 's/'"${ddr_mult_find}"'/\1/p' "$PS7_INIT_FILE"))
+
+current_cpu_mult=$(echo "ibase=16; ${current_cpu_mult_hex}" | bc)
+current_ddr_mult=$(echo "ibase=16; ${current_ddr_mult_hex}" | bc)
+
+new_cpu_mult=$1
+new_ddr_mult=$2
+
+if ! [[ "$new_cpu_mult" =~ '^[0-9]+$' ]]; then
+    if [ "$new_cpu_mult" -ge 128 ] || [ "$new_cpu_mult" -le 0 ]; then
+	echo "CPU multiplier ${new_cpu_mult} is invalid. Must be >0 and <128"
+	exit 3
+    fi
+fi
+
+if ! [[ "$new_ddr_mult" =~ '^[0-9]+$' ]]; then
+    if [ "$new_ddr_mult" -ge 128 ] || [ "$new_ddr_mult" -le 0 ]; then
+	echo "DDR multiplier ${new_ddr_mult} is invalid. Must be >0 and <128"
+	exit 4
+    fi
+fi
+
+cpu_mult_replace="${cpu_mult_template/XX/${new_cpu_mult}}"
+
+echo "Current CPU multiplier: ${current_cpu_mult}, new multiplier ${new_cpu_mult}"
+echo "Current DDR multiplier: ${current_ddr_mult}, new multiplier ${new_ddr_mult}"
+
+new_cpu_mult_hex=$(printf "%02X" $new_cpu_mult)
+cpu_mult_replace="    ${cpu_mult_template/XX/${new_cpu_mult_hex}}"
+new_ddr_mult_hex=$(printf "%02X" $new_ddr_mult)
+ddr_mult_replace="    ${ddr_mult_template/XX/${new_ddr_mult_hex}}"
+
+sed -i -r 's/'"${cpu_mult_find}"'/'"${cpu_mult_replace}"'/g' "$PS7_INIT_FILE"
+sed -i -r 's/'"${ddr_mult_find}"'/'"${ddr_mult_replace}"'/g' "$PS7_INIT_FILE"
+
+cd "$SDK_PATH/Release"
+make clean
+make
+
+echo 'Done. Run "make sdimg" now to create overclocked firmware.'
+
diff --git a/scripts/libre.its b/scripts/libre.its
new file mode 100644
index 0000000..672b3ae
--- /dev/null
+++ b/scripts/libre.its
@@ -0,0 +1,159 @@
+/*
+ * U-Boot uImage source file with multiple kernels, ramdisks and FDT blobs
+ * This example makes use of the 'loadables' field
+ */
+
+/*
+ * fdt get addr foo /images/fdt@1 data
+ */
+
+/dts-v1/;
+
+/ {
+	description = "Configuration to load fpga before Kernel";
+	magic = "ITB PlutoSDR (ADALM-PLUTO)";
+	#address-cells = <1>;
+	images {
+
+		fdt@1 {
+			description = "zynq-libre-sdr";
+			data = /incbin/("../build/zynq-libre.dtb");
+			type = "flat_dt";
+			arch = "arm";
+			compression = "none";
+		};
+
+
+		fpga@1 {
+			description = "FPGA";
+			data = /incbin/("../build/system_top.bit");
+			type = "fpga";
+			arch = "arm";
+			compression = "none";
+			load = <0xF000000>;
+			hash@1 {
+				algo = "md5";
+			};
+		};
+
+		linux_kernel@1 {
+			description = "Linux";
+			data = /incbin/("../build/zImage");
+			type = "kernel";
+			arch = "arm";
+			os = "linux";
+			compression = "none";
+			load = <0x8000>;
+			entry = <0x8000>;
+			hash@1 {
+				algo = "md5";
+			};
+		};
+		ramdisk@1 {
+			description = "Ramdisk";
+			data = /incbin/("../build/rootfs.cpio.gz");
+			type = "ramdisk";
+			arch = "arm";
+			os = "linux";
+			compression = "gzip";
+			hash@1 {
+				algo = "md5";
+			};
+		};
+
+	};
+
+	configurations {
+		default = "config@0";
+		config@0 {
+			description = "Linux with fpga RevA";
+			fdt = "fdt@1";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		/* all below is currently RevB ! */
+
+		config@1 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@2 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@3 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@4 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@5 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@6 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+
+		config@7 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@8 { /* This one is actually RevC */
+			description = "Linux with fpga RevC";
+			fdt = "fdt@3";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@9 { /* This one is actually RevB */
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@10 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+	};
+};
diff --git a/scripts/libre.mk b/scripts/libre.mk
new file mode 100644
index 0000000..fe069f9
--- /dev/null
+++ b/scripts/libre.mk
@@ -0,0 +1,10 @@
+
+# Target specific constants go here
+
+#HDF_URL:=http://github.com/analogdevicesinc/plutosdr-fw/releases/download/${LATEST_TAG}/system_top.hdf
+TARGET_DTS_FILES:= zynq-libre.dtb 
+COMPLETE_NAME:=LIBRE
+ZIP_ARCHIVE_PREFIX:=libresdr
+DEVICE_VID:=0x0456
+DEVICE_PID:=0xb673
+
